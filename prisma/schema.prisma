
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"  
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  firstName        String?   @map("first_name")
  lastName         String?   @map("last_name")
  profileImageUrl  String?   @map("profile_image_url")
  role             String    @default("employee")
  isActive         Boolean   @default(true) @map("is_active")
  lastLoginAt      DateTime? @map("last_login_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  projects         Project[]
  timeEntries      TimeEntry[]
  employees        Employee[]
  projectEmployees ProjectEmployee[]

  @@map("users")
}

model Project {
  id               String    @id @default(cuid())
  name             String
  projectNumber    String?   @map("project_number")
  description      String?
  color            String    @default("#1976D2")
  startDate        DateTime? @map("start_date")
  endDate          DateTime? @map("end_date")
  isEnterpriseWide Boolean   @default(true) @map("is_enterprise_wide")
  userId           String    @map("user_id")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  user            User              @relation(fields: [userId], references: [id])
  tasks           Task[]
  timeEntries     TimeEntry[]
  projectEmployees ProjectEmployee[]

  @@map("projects")
}

model Task {
  id          String    @id @default(cuid())
  projectId   String    @map("project_id")
  name        String
  description String?
  status      String    @default("active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  project     Project     @relation(fields: [projectId], references: [id])
  timeEntries TimeEntry[]

  @@map("tasks")
}

model TimeEntry {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  projectId   String   @map("project_id")
  taskId      String?  @map("task_id")
  description String?
  date        DateTime
  startTime   String   @map("start_time")
  endTime     String   @map("end_time")
  duration    Decimal  @db.Decimal(5, 2)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user    User     @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  project Project  @relation(fields: [projectId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  task    Task?    @relation(fields: [taskId], references: [id], onUpdate: NoAction, onDelete: SetNull)

  @@map("time_entries")
}

model Employee {
  id         String   @id @default(cuid())
  employeeId String   @unique @map("employee_id")
  firstName  String   @map("first_name")
  lastName   String   @map("last_name")
  department String
  userId     String   @map("user_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user             User              @relation(fields: [userId], references: [id])
  projectEmployees ProjectEmployee[]

  @@map("employees")
}

model ProjectEmployee {
  id         String   @id @default(cuid())
  projectId  String   @map("project_id")
  employeeId String   @map("employee_id")
  userId     String   @map("user_id")
  createdAt  DateTime @default(now()) @map("created_at")

  project  Project  @relation(fields: [projectId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  employee Employee @relation(fields: [employeeId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  user     User     @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  @@map("project_employees")
}
